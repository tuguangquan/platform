<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.whut.platform.business.datarule.mapper.DataRoleAddressMapper">
    <sql id="drole_address_fields">
		ID,DROLEID,ADDRESSID,DROLENAME
	</sql>

    <resultMap id="dataRoleAddressResultMap" type="DataRoleAddress">
        <id property="id" column="ID" />
        <result property="dRoleId" column="DROLEID" />
        <result property="addressId" column="ADDRESSID" />
        <result property="dRoleName" column="DROLENAME"/>
    </resultMap>

    <insert id="add" parameterType="DataRoleAddress" keyProperty="id"
            useGeneratedKeys="true">
        INSERT INTO
        drole_address(
        <include refid="drole_address_fields" />
        )
        VALUES (#{id}, #{dRoleId}, #{addressId},#{dRoleName});
        <selectKey resultType="long" keyProperty="id">
            select
            LAST_INSERT_ID() as id
        </selectKey>
    </insert>

    <select id="totalCount" parameterType="map" resultType="java.lang.Long">
        SELECT count(*)
        FROM drole_address
        <where>
            <if test="id != null">ID=#{id}</if>
        </where>
    </select>

    <update id="update" parameterType="DataRoleAddress">
        UPDATE drole_address
        <set>
            <if test="dRoleId != null">DROLEID=#{dRoleId},</if>
            <if test="addressId != null">ADDRESSID=#{addressId},</if>
            <if test="dRoleName != null">DROLENAME=#{dRoleName}</if>
        </set>
        WHERE ID = #{id};
    </update>

    <delete id="delete" parameterType="DataRoleAddress">
        DELETE FROM drole_address
        <where>
            <if test="id != null">ID=#{id}</if>
            <if test="dRoleId != null">AND DROLEID=#{dRoleId}</if>
        </where>
    </delete>

    <select id="get" parameterType="DataRoleAddress" resultMap="dataRoleAddressResultMap">
        SELECT
        <include refid="drole_address_fields" />
        FROM drole_address WHERE ID=#{id}
    </select>

    <select id="findByCondition" parameterType="java.lang.Long" resultMap="dataRoleAddressResultMap">
        SELECT
        <include refid="drole_address_fields" />
        FROM drole_address WHERE droleId=#{id}
    </select>

    <select id="findByDataRoleName" parameterType="java.lang.String" resultMap="dataRoleAddressResultMap">
        SELECT
        <include refid="drole_address_fields" />
        FROM drole_address WHERE droleName=#{name}
    </select>

    <select id="getProvinceAndColorWithDataRole" parameterType="java.lang.String" resultType="map">
        SELECT a.id,a.province,pr.riskvalue as avgRiskValue,count(DISTINCT(cr.reportnumber)) as craneNumber,col.riskcolor as color
        FROM craneinspectreport cr,province_riskvalue pr,address a,riskcolor col,user u,drole dr,user_drole udr,drole_address draddr,riskvalue r
        where u.id=#{userId} AND pr.province=a.province AND pr.riskvalue=r.riskvalue AND col.riskvalue=pr.riskvalue AND u.id=udr.userId AND udr.droleId=dr.id AND draddr.droleId=dr.id AND draddr.addressId=a.id
        AND a.id=cr.addressId
        GROUP BY a.province order by craneNumber desc
    </select>

    <select id="getProvinceInfoWithDataRuleByCondition" parameterType="map" resultType="map">
        SELECT a.id,a.province,round(avg(r.riskvalue)) as avgRiskValue,count(DISTINCT(cr.reportnumber)) as craneNumber,col.riskcolor as color
        FROM craneinspectreport cr,address a,riskcolor col,riskvalue r
        where  cr.id=r.reportId  AND a.id=cr.addressId AND col.riskvalue=r.riskvalue
        <if test="province!=null">
            AND a.province=#{province}
        </if>
        <if test='equipmentVariety!="0"'>
            AND cr.equipmentvariety=#{equipmentVariety}
        </if>
        <if test='sTime!="0"'>
            AND ROUND(DATEDIFF(NOW(),cr.manufacturedate)/365) between #{sTime}
        </if>
        <if test='eTime!="0"'>
            AND #{eTime}
        </if>
        <if test="startValue!=0f">
            AND r.riskvalue BETWEEN #{startValue}
        </if>
        <if test="endValue!=0f">
            AND #{endValue}
        </if>
        GROUP BY a.province order by craneNumber desc
    </select>
    <select id="getProvinceInfoWithDataRuleByCondition0" parameterType="map" resultType="map">
        SELECT a.id,a.province,round(avg(r.riskvalue)) as avgRiskValue,count(DISTINCT(cr.reportnumber)) as craneNumber,col.riskcolor as color
        FROM craneinspectreport cr,riskvalue r,address a,riskcolor col
        where
        cr.id=r.reportId AND col.riskvalue=r.riskvalue
        AND a.id=cr.addressId
        GROUP BY a.province order by craneNumber desc
    </select>
    <select id="getCityAndColorWithDataRole" parameterType="map" resultType="map">
        SELECT a.id,a.city,round(avg(r.riskvalue)) as avgRiskValue,count(DISTINCT(cr.reportnumber)) as craneNumber,col.riskcolor as color
        FROM craneinspectreport cr,riskvalue r,address a,riskcolor col,user u,drole dr,user_drole udr,drole_address draddr
        WHERE u.id=#{userId} and a.province=#{province} and cr.id=r.reportId AND col.riskvalue=r.riskvalue AND u.id=udr.userId AND udr.droleId=dr.id AND draddr.droleId=dr.id AND draddr.addressId=a.id
        AND a.id=cr.addressId
        GROUP BY a.city order by avgRiskValue desc
    </select>

    <select id="getCityWithDataRole" parameterType="map" resultType="map">
        SELECT a.id,a.city,count(DISTINCT(cr.reportnumber)) as craneNumber
        FROM user u
		LEFT JOIN user_drole udr ON udr.userId=u.id
		LEFT JOIN drole dr ON udr.droleId=dr.id
		LEFT JOIN drole_address draddr ON draddr.droleId=dr.id
		LEFT JOIN address a ON a.id=draddr.addressId
		LEFT JOIN craneinspectreport cr ON cr.addressId=a.id
        WHERE u.id=#{userId} and a.province=#{province}
        GROUP BY a.city order by craneNumber desc
    </select>

    <select id="getAreaAndColorWithDataRole" parameterType="map" resultType="map">
        SELECT a.id,a.area,round(avg(r.riskvalue)) as avgRiskValue,count(DISTINCT(cr.reportnumber)) as craneNumber,col.riskcolor as color
        FROM craneinspectreport cr,riskvalue r,address a,riskcolor col,user u,drole dr,user_drole udr,drole_address draddr
        WHERE u.id=#{userId} and a.province=#{province} and a.city=#{city} and cr.id=r.reportId AND col.riskvalue=r.riskvalue AND u.id=udr.userId AND udr.droleId=dr.id AND draddr.droleId=dr.id AND draddr.addressId=a.id
        AND a.id=cr.addressId
        GROUP BY a.area order by avgRiskValue desc
    </select>

    <select id="getAreaWithDataRole" parameterType="map" resultType="map">
        SELECT a.id,a.city,a.area,count(DISTINCT(cr.reportnumber)) as craneNumber
        FROM user u
		LEFT JOIN user_drole udr ON udr.userId=u.id
		LEFT JOIN drole dr ON udr.droleId=dr.id
		LEFT JOIN drole_address draddr ON draddr.droleId=dr.id
		LEFT JOIN address a ON a.id=draddr.addressId
		LEFT JOIN craneinspectreport cr ON cr.addressId=a.id
        WHERE u.id=#{userId} and a.province=#{province} and a.city=#{city}
        GROUP BY a.area order by craneNumber desc
    </select>

    <select id="findAddressIdById" parameterType="java.lang.Long"  resultType="java.lang.Long">
        Select addressId
        from   drole_address where droleId=#{id}
    </select>
    <select id="getAddressIdBydRoleName" parameterType="java.lang.String"  resultType="java.lang.Long">
        Select addressId
        from   drole_address where droleName=#{dRoleName}
    </select>
    <select id="getCraneNumberByProvince" parameterType="java.lang.String" resultType="java.lang.Long">
        select
        count(cr.reportnumber)
        from craneinspectreport cr,address a
        where cr.addressId=a.id
        and a.province=#{province}
        group by a.province
    </select>
    <select id="getCraneNumberByCity" parameterType="map" resultType="java.lang.Long">
        select
        count(cr.reportnumber)
        from craneinspectreport cr,address a
        where cr.addressId=a.id
        and a.province=#{province} and a.city=#{city}
        group by a.province,a.city
    </select>
    <select id="getCraneNumberByArea" parameterType="map" resultType="java.lang.Long">
        select
        count(cr.reportnumber)
        from craneinspectreport cr,address a
        where cr.addressId=a.id
        and a.province=#{province} and a.city=#{city} and a.area=#{area}
        group by a.province,a.city,a.area
    </select>
    <select id="getProvinceListWithDataRole" parameterType="java.lang.Long" resultType="map">
        select a.province
        from user u,drole dr,user_drole udr,drole_address daddr,address a
        where u.id=udr.userId and udr.droleId=dr.id and daddr.droleId=dr.id and daddr.addressId=a.id
        and u.id=#{userId} group by province order by a.id asc
    </select>
    <insert id="batchInsertToProvinceRiskValue" parameterType="java.util.List" useGeneratedKeys="true">
        <selectKey resultType="long" keyProperty="id" order="AFTER">
            select
            LAST_INSERT_ID() as id
        </selectKey>
        INSERT INTO
        province_riskvalue(province,riskvalue)
        values
        <foreach collection="list" item="item" index="index" separator=",">
            (#{item.province},#{item.avgRiskValue})
        </foreach>
    </insert>
    <update id="updateProvinceRiskValue" parameterType="map">
        UPDATE
        province_riskvalue
        SET
        <if test="riskValue!=null">
         riskvalue=#{riskValue}
        </if>
        <if test="province!=null">
         WHERE province=#{province}
        </if>
    </update>
    <select id="validateProvinceRiskValueIsExistByProvince" parameterType="java.lang.String" resultType="map">
         SELECT
         *
         FROM
         province_riskvalue
         <if test="province!=null">
         WHERE province=#{province}
         </if>
    </select>
    <delete id="deleteProvinceRiskValue" parameterType="java.lang.String" >
       DELETE
       FROM
       province_riskvalue
       <if test="province!=null">
       WHERE province=#{province}
       </if>
    </delete>
    <select id="getProvinceByUserId" parameterType="java.lang.Long" resultType="java.lang.String">
         SELECT a.province
        FROM address a,user u,drole dr,user_drole udr,drole_address draddr
        where
        <if test="userId!=null">
        u.id=#{userId} AND
        </if>
        u.id=udr.userId AND udr.droleId=dr.id AND draddr.droleId=dr.id AND draddr.addressId=a.id
        GROUP BY a.province
    </select>
</mapper>